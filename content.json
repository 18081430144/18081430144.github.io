{"meta":{"title":"郑晓冉的Hexo","subtitle":"","description":"","author":"郑晓冉","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-04-01T13:19:19.000Z","updated":"2020-04-01T13:38:20.558Z","comments":true,"path":"categories/index-1.html","permalink":"http://yoursite.com/categories/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-01T04:31:18.000Z","updated":"2020-04-01T04:40:38.070Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2020-04-01T13:57:42.000Z","updated":"2020-04-01T13:58:48.613Z","comments":true,"path":"search/index.html","permalink":"http://yoursite.com/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-01T04:34:47.000Z","updated":"2020-04-01T04:40:41.944Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-01T13:31:35.000Z","updated":"2020-04-01T13:39:01.862Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"矩阵控制","slug":"矩阵控制","date":"2020-06-25T01:47:29.019Z","updated":"2020-06-25T02:49:52.606Z","comments":true,"path":"2020/06/25/矩阵控制/","link":"","permalink":"http://yoursite.com/2020/06/25/%E7%9F%A9%E9%98%B5%E6%8E%A7%E5%88%B6/","excerpt":"","text":"控制BBC开发板上任意的小灯为了随意控制点阵灯的亮和灭，开关按钮按下为0则亮，为一则灭。 首先需在前面定义一个25位数组c。 var c=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] 我们需要在body中添加25个按钮，相当于25盏灯.需写代码如下： 123456789101112131415161718192021222324252627282930&lt;h3&gt;控制单个小灯亮暗&lt;/h3&gt; &lt;button id=\"led00\" onclick=\"led00()\"&gt;第一行第一列&lt;/button&gt; &lt;button id=\"led01\" onclick=\"led01()\"&gt;第一行第二列&lt;/button&gt; &lt;button id=\"led02\" onclick=\"led02()\"&gt;第一行第三列&lt;/button&gt; &lt;button id=\"led03\" onclick=\"led03()\"&gt;第一行第四列&lt;/button&gt; &lt;button id=\"led04\" onclick=\"led04()\"&gt;第一行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led10\" onclick=\"led10()\"&gt;第二行第一列&lt;/button&gt; &lt;button id=\"led11\" onclick=\"led11()\"&gt;第二行第二列&lt;/button&gt; &lt;button id=\"led12\" onclick=\"led12()\"&gt;第二行第三列&lt;/button&gt; &lt;button id=\"led13\" onclick=\"led13()\"&gt;第二行第四列&lt;/button&gt; &lt;button id=\"led14\" onclick=\"led14()\"&gt;第二行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led20\" onclick=\"led20()\"&gt;第三行第一列&lt;/button&gt; &lt;button id=\"led21\" onclick=\"led21()\"&gt;第三行第二列&lt;/button&gt; &lt;button id=\"led22\" onclick=\"led22()\"&gt;第三行第三列&lt;/button&gt; &lt;button id=\"led23\" onclick=\"led23()\"&gt;第三行第四列&lt;/button&gt; &lt;button id=\"led24\" onclick=\"led24()\"&gt;第三行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led30\" onclick=\"led30()\"&gt;第四行第一列&lt;/button&gt; &lt;button id=\"led31\" onclick=\"led31()\"&gt;第四行第二列&lt;/button&gt; &lt;button id=\"led32\" onclick=\"led32()\"&gt;第四行第三列&lt;/button&gt; &lt;button id=\"led33\" onclick=\"led33()\"&gt;第四行第四列&lt;/button&gt; &lt;button id=\"led34\" onclick=\"led34()\"&gt;第四行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led40\" onclick=\"led40()\"&gt;第五行第一列&lt;/button&gt; &lt;button id=\"led41\" onclick=\"led41()\"&gt;第五行第二列&lt;/button&gt; &lt;button id=\"led42\" onclick=\"led42()\"&gt;第五行第三列&lt;/button&gt; &lt;button id=\"led43\" onclick=\"led43()\"&gt;第五行第四列&lt;/button&gt; &lt;button id=\"led44\" onclick=\"led44()\"&gt;第五行第五列&lt;/button&gt; 每个函数都会调用一个函数，用来改变小灯的状态。 第一行到第五行五个小灯所调用的五个函数如下代码： function led00() //第一行 { if(c[0]==0) { led[0]=led[0]|(1&lt;&lt;4); c[0]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;4)); c[0]=0; } randLED(); } function led01() { if(c[1]==0) { led[0]=led[0]|(1&lt;&lt;3); c[1]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;3)); c[1]=0; } randLED(); } function led02() { if(c[2]==0) { led[0]=led[0]|(1&lt;&lt;2); c[2]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;2)); c[2]=0; } randLED(); } function led03() { if(c[3]==0) { led[0]=led[0]|(1&lt;&lt;1); c[3]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;1)); c[3]=0; } randLED(); } function led04() { if(c[4]==0) { led[0]=led[0]|(1&lt;&lt;0); c[4]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;0)); c[4]=0; } randLED(); } function led10() //第二行 { if(c[5]==0) { led[1]=led[1]|(1&lt;&lt;4); c[5]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;4)); c[5]=0; } randLED(); } function led11() { if(c[6]==0) { led[1]=led[1]|(1&lt;&lt;3); c[6]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;3)); c[6]=0; } randLED(); } function led12() { if(c[7]==0) { led[1]=led[1]|(1&lt;&lt;2); c[7]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;2)); c[7]=0; } randLED(); } function led13() { if(c[8]==0) { led[1]=led[1]|(1&lt;&lt;1); c[8]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;1)); c[8]=0; } randLED(); } function led14() { if(c[9]==0) { led[1]=led[1]|(1&lt;&lt;0); c[9]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;0)); c[9]=0; } randLED(); } function led20() //第三行 { if(c[10]==0) { led[2]=led[2]|(1&lt;&lt;4); c[10]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;4)); c[10]=0; } randLED(); } function led21() { if(c[11]==0) { led[2]=led[2]|(1&lt;&lt;3); c[11]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;3)); c[11]=0; } randLED(); } function led22() { if(c[12]==0) { led[2]=led[2]|(1&lt;&lt;2); c[12]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;2)); c[12]=0; } randLED(); } function led23() { if(c[13]==0) { led[2]=led[2]|(1&lt;&lt;1); c[13]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;1)); c[13]=0; } randLED(); } function led24() { if(c[14]==0) { led[2]=led[2]|(1&lt;&lt;0); c[14]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;0)); c[14]=0; } randLED(); } function led30() //第四行 { if(c[15]==0) { led[3]=led[3]|(1&lt;&lt;4); c[15]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;4)); c[15]=0; } randLED(); } function led31() { if(c[16]==0) { led[3]=led[3]|(1&lt;&lt;3); c[16]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;3)); c[16]=0; } randLED(); } function led32() { if(c[17]==0) { led[3]=led[3]|(1&lt;&lt;2); c[17]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;2)); c[17]=0; } randLED(); } function led33() { if(c[18]==0) { led[3]=led[3]|(1&lt;&lt;1); c[18]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;1)); c[18]=0; } randLED(); } function led34() { if(c[19]==0) { led[3]=led[3]|(1&lt;&lt;0); c[19]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;0)); c[19]=0; } randLED(); } function led40() //第五行 { if(c[20]==0) { led[4]=led[4]|(1&lt;&lt;4); c[20]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;4)); c[20]=0; } randLED(); } function led41() { if(c[21]==0) { led[4]=led[4]|(1&lt;&lt;3); c[21]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;3)); c[21]=0; } randLED(); } function led42() { if(c[22]==0) { led[4]=led[4]|(1&lt;&lt;2); c[22]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;2)); c[22]=0; } randLED(); } function led43() { if(c[23]==0) { led[4]=led[4]|(1&lt;&lt;1); c[23]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;1)); c[23]=0; } randLED(); } function led44() { if(c[24]==0) { led[4]=led[4]|(1&lt;&lt;0); c[24]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;0)); c[24]=0; } randLED(); } 在BBC开发板上，如若我们任意按下一盏小灯，任意小灯随之亮灭，就完成了！","categories":[],"tags":[]},{"title":"一行LED","slug":"一行LED","date":"2020-06-23T09:30:01.124Z","updated":"2020-06-23T09:59:12.541Z","comments":true,"path":"2020/06/23/一行LED/","link":"","permalink":"http://yoursite.com/2020/06/23/%E4%B8%80%E8%A1%8CLED/","excerpt":"","text":"控制LED行与列在BBC开发版上面有5*5的矩阵，用数组来控制LED点阵，可使lED整行整列的亮灭。修改好代码如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = 'e95d0753-251d-470a-a062-fa1922dfa9a8'; LED_SERVICE = 'e95dd91d-251d-470a-a062-fa1922dfa9a8'; DEVICE_INFORMATION_SERVICE = '0000180a-0000-1000-8000-00805f9b34fb'; TEMPERATURE_SERVICE = 'e95d6100-251d-470a-a062-fa1922dfa9a8'; // 特性 UUIDs ACCELEROMETER_DATA = 'e95dca4b-251d-470a-a062-fa1922dfa9a8'; LED_MATRIX_STATE = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'; MODEL_NUMBER_STRING = '00002a24-0000-1000-8000-00805f9b34fb'; TEM_TEMPERATURE = 'e95d1b25-251d-470a-a062-fa1922dfa9a8'; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 &#123; console.log(\"discoverOrdisconnectDevices\"); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected()//连接 &#123; console.log(\"onDisconnected\"); resetUI(); &#125; //function input.temperature(): number; function discoverDevices()// 搜索设备函数 &#123; console.log(\"discoverDevices\"); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log('&gt; Name:' + device.name); console.log('&gt; Id:' + device.id); console.log('&gt; Connected:' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert('ERROR' +error); console.log('ERROR' +error); &#125;); &#125; function connect() //连接函数 &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function (server) &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected \" + server.connected); selected_device.addEventListener('gattserverdisconnected',onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status)//设置连接状态 &#123; connected=status; document.getElementById('status_connected').innerHTML = status; if(status==true) &#123; document.getElementById('btn_scan').innerHTML = \"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML = \"Discover Devices\"; &#125; &#125; function setDiscoveryStatus(status)//设置发现状态 &#123; services_discovered=status; document.getElementById('status_discovered').innerHTML=status; &#125; function resetUI() //重置页面 &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //发现服务和特性 &#123; console.log(\"discoverSvcsAndChars server=\" + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(\"Got \" + service_count + \" services\"); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) //温度 &#123; has_temperature_service = true; &#125; console.log('Getting Characteristics for service ' + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log('&gt; Service: ' + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log('&gt;&gt; Characteristic: ' + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(characteristic.uuid == TEM_TEMPERATURE) //温度 &#123; tem_temperature = characteristic; has_tem_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(\"FINISHED DISCOVERY\"); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i=0,j=0; function randomLEDs(ct) //控制led &#123; console.log(\"randomLEDs\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array=[]; if(ct==0) &#123; led_array[0] = 1&lt;&lt;i; led_array[1] = 1&lt;&lt;i; led_array[2] = 1&lt;&lt;i; led_array[3] = 1&lt;&lt;i; led_array[4] = 1&lt;&lt;i; i++; if(i==5)i=0; &#125; else if(ct==1) &#123; led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; led_array[j] = 31; j++; if(j==5)j=0; &#125; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /*led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;*/ /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function readModelNumber() // 蓝牙信息服务 &#123; console.log(\"readModelNumber\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_device_information_service) &#123; alert(\"Error: The connected device does not contain the device information service\"); return; &#125; if (!has_model_name_string) &#123; alert(\"Error: The connected device does not contain the model name string characteristic\"); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(\"utf-8\").decode(data); console.log(model_number_string); document.getElementById(\"model_number\").innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function accelerometer() //加速度传感器 &#123; console.log(\"accelerometer\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_accelerometer_service) &#123; alert(\"Error: The connected device does not contain the accelerometer service\"); return; &#125; if (!has_accelerometer_data) &#123; alert(\"Error: The connected device does not contain the accelerometer_data characteristic\"); return; &#125; accelerometer_data.readValue() .then(value =&gt; &#123; buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(\"X=\" + X + \", Y=\" + Y + \", Z+\" + Z); document.getElementById(\"ac_data\").innerHTML = \"X=\" + X + \", Y=\" + Y + \",Z=\" + Z; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=\"status_connected\"&gt; false &lt;/td&gt; &lt;td id=\"status_discovered\"&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = \"btn_scan\" onclick=\"discoverOrdisconnectDevices()\"&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=\"btn_write\" onclick=\"randomLEDs(0)\"&gt;控制小灯行&lt;/button&gt; &lt;button id=\"btu_write\" onclick=\"randomLEDs(1)\"&gt;控制小灯列&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=\"btn_read\" onclick=\"readModelNumber()\"&gt;Read Model number&lt;/button&gt; &lt;div id=\"model_number\"&gt;&lt;/div&gt; &lt;h3&gt;accelerometer_data&lt;/h3&gt; &lt;button id=\"btn_readAC\" onclick=\"accelerometer()\"&gt;Read accelerometer_data&lt;/button&gt; &lt;div id=\"ac_data\"&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt;&lt;/html&gt; 连接BBC开发板后我们发现它会有规律的依次右往左，上往下变化如下图所示：","categories":[],"tags":[]},{"title":"启用通知","slug":"启用通知","date":"2020-06-23T07:37:55.561Z","updated":"2020-06-23T08:55:12.505Z","comments":true,"path":"2020/06/23/启用通知/","link":"","permalink":"http://yoursite.com/2020/06/23/%E5%90%AF%E7%94%A8%E9%80%9A%E7%9F%A5/","excerpt":"","text":"加速度值得显示加速度是BBC板上面的一个传感器，它可以感受到板子是否位置发生改变是否有震动，为了显示出加速度的值，我们需要将代码写成如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = 'e95d0753-251d-470a-a062-fa1922dfa9a8'; LED_SERVICE = 'e95dd91d-251d-470a-a062-fa1922dfa9a8'; DEVICE_INFORMATION_SERVICE = '0000180a-0000-1000-8000-00805f9b34fb'; TEMPERATURE_SERVICE = 'e95d6100-251d-470a-a062-fa1922dfa9a8'; // 特性 UUIDs ACCELEROMETER_DATA = 'e95dca4b-251d-470a-a062-fa1922dfa9a8'; LED_MATRIX_STATE = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'; MODEL_NUMBER_STRING = '00002a24-0000-1000-8000-00805f9b34fb'; TEM_TEMPERATURE = 'e95d1b25-251d-470a-a062-fa1922dfa9a8'; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 &#123; console.log(\"discoverOrdisconnectDevices\"); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected()//连接 &#123; console.log(\"onDisconnected\"); resetUI(); &#125; //function input.temperature(): number; function discoverDevices()// 搜索设备函数 &#123; console.log(\"discoverDevices\"); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log('&gt; Name:' + device.name); console.log('&gt; Id:' + device.id); console.log('&gt; Connected:' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert('ERROR' +error); console.log('ERROR' +error); &#125;); &#125; function connect() //连接函数 &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function (server) &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected \" + server.connected); selected_device.addEventListener('gattserverdisconnected',onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status)//设置连接状态 &#123; connected=status; document.getElementById('status_connected').innerHTML = status; if(status==true) &#123; document.getElementById('btn_scan').innerHTML = \"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML = \"Discover Devices\"; &#125; &#125; function setDiscoveryStatus(status)//设置发现状态 &#123; services_discovered=status; document.getElementById('status_discovered').innerHTML=status; &#125; function resetUI() //重置页面 &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //发现服务和特性 &#123; console.log(\"discoverSvcsAndChars server=\" + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(\"Got \" + service_count + \" services\"); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) //温度 &#123; has_temperature_service = true; &#125; console.log('Getting Characteristics for service ' + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log('&gt; Service: ' + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log('&gt;&gt; Characteristic: ' + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(characteristic.uuid == TEM_TEMPERATURE) //温度 &#123; tem_temperature = characteristic; has_tem_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(\"FINISHED DISCOVERY\"); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i=0; function randomLEDs() //控制led &#123; console.log(\"randomLEDs\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array=[]; if(i==0) &#123; led_array[0] = 10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4; i++; &#125; else &#123; led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; i=0; &#125; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /*led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;*/ /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function readModelNumber() // 蓝牙信息服务 &#123; console.log(\"readModelNumber\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_device_information_service) &#123; alert(\"Error: The connected device does not contain the device information service\"); return; &#125; if (!has_model_name_string) &#123; alert(\"Error: The connected device does not contain the model name string characteristic\"); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(\"utf-8\").decode(data); console.log(model_number_string); document.getElementById(\"model_number\").innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function accelerometer() //加速度传感器 &#123; console.log(\"accelerometer\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_accelerometer_service) &#123; alert(\"Error: The connected device does not contain the accelerometer service\"); return; &#125; if (!has_accelerometer_data) &#123; alert(\"Error: The connected device does not contain the accelerometer_data characteristic\"); return; &#125; accelerometer_data.readValue() .then(value =&gt; &#123; buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(\"X=\" + X + \", Y=\" + Y + \", Z+\" + Z); document.getElementById(\"ac_data\").innerHTML = \"X=\" + X + \", Y=\" + Y + \",Z=\" + Z; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=\"status_connected\"&gt; false &lt;/td&gt; &lt;td id=\"status_discovered\"&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = \"btn_scan\" onclick=\"discoverOrdisconnectDevices()\"&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=\"btn_write\" onclick=\"randomLEDs()\"&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=\"btn_read\" onclick=\"readModelNumber()\"&gt;Read Model number&lt;/button&gt; &lt;div id=\"model_number\"&gt;&lt;/div&gt; &lt;h3&gt;accelerometer_data&lt;/h3&gt; &lt;button id=\"btn_readAC\" onclick=\"accelerometer()\"&gt;Read accelerometer_data&lt;/button&gt; &lt;div id=\"ac_data\"&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt;&lt;/html&gt; 其中要看通知是否成功的状态添加如下代码 1var notifications_enabled = false; 控制通知的开启与关闭作用我们需添加一个开关按钮，添加代码如下： 123&lt;h2&gt;Notifications - Accelerometer X, Y, Z&lt;/h2&gt; &lt;button id=\"btn_notify\" onclick=\"toggleAccelerometerNotifications()\"&gt;Toggle Notifications&lt;/button&gt; &lt;div id=\"accelerometer_data\"&gt;&lt;/div&gt; 代码完成后，可以看到如下图Notifications显示true，说明我们的启用通知已开启","categories":[],"tags":[]},{"title":"micro bit-BBC板的服务与特性","slug":"micro bit-BBC板的服务与特性","date":"2020-06-22T01:45:46.377Z","updated":"2020-06-22T02:22:20.447Z","comments":true,"path":"2020/06/22/micro bit-BBC板的服务与特性/","link":"","permalink":"http://yoursite.com/2020/06/22/micro%20bit-BBC%E6%9D%BF%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8E%E7%89%B9%E6%80%A7/","excerpt":"","text":"服务与特性一、读取BBC板的名称首先我们需要添加一个读数据的函数，如下代码所示： 1234567891011121314151617181920212223242526272829303132333435363738function readModelNumber() &#123; console.log(\"readModelNumber\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_device_information_service) &#123; alert(\"Error: The connected device does not contain the device information service\"); return; &#125; if (!has_model_name_string) &#123; alert(\"Error: The connected device does not contain the model name string characteristic\"); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(\"utf-8\").decode(data); console.log(model_number_string); document.getElementById(\"model_number\").innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; 再为它添加一个读取按钮，需要在程序中添加以下代码： 12&lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=\"btn_read\" onclick=\"readModelNumber()\"&gt;Read Model number&lt;/button&gt; 修改后的所有代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330&lt;html&gt;&lt;head&gt; &lt;script&gt; var selected_device; // 保存用户选择的蓝牙设备 var connected_server; //在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected = false; //在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 var services_discovered = false; //在第五节课上添加 //在第5课上添加以下内容 // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_number_string = false; var has_temperature_service = false; var has_temperature = false; // service UUIDs ACCELEROMETER_SERVICE = 'e95d0753-251d-470a-a062-fa1922dfa9a8'; LED_SERVICE = 'e95dd91d-251d-470a-a062-fa1922dfa9a8'; DEVICE_INFORMATION_SERVICE = '0000180a-0000-1000-8000-00805f9b34fb'; TEMPERATURE_SERVICE = 'e95d6100-251d-470a-a062-fa1922dfa9a8'; // characteristic UUIDs ACCELEROMETER_DATA = 'e95dca4b-251d-470a-a062-fa1922dfa9a8'; LED_MATRIX_STATE = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'; MODEL_NUMBER_STRING = '00002a24-0000-1000-8000-00805f9b34fb'; TEMPERATURE = 'e95d9250-251d-470a-a062-fa1922dfa9a8'; // cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count; function discoverDevicesOrDisconnect() //在第四课基础上添加的函数 &#123; console.log(\"discoverDevicesOrDisconnect\"); console.log(\" \") if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() //在第四课基础上添加的函数 &#123; console.log(\"onDisconnected\") resetUI(); &#125; function discoverDevices() &#123; console.log(\"discoverDevices\"); //consol.log 控制台打印输出 var options = &#123; acceptAllDevices: true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE, TEMPERATURE_SERVICE ] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) //Navigator对象，包含有关游览器的信息 .then(device =&gt; &#123; console.log('&gt; Name: ' + device.name); console.log('&gt; Id: ' + device.id); console.log('&gt; Connected: ' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); //在第二课基础上添加的函数 &#125;) .catch(error =&gt; &#123; alert('ERROR:' + error); console.log('ERROR:' + error); &#125;); &#125; function connect() &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function (server) //表示连接成功 &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected=\" + server.connected); selected_device.addEventListener('gattserverdisconnected', onDisconnected); connected_server = server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function (error) //表示连接失败 &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected = status; document.getElementById('status_connected').innerHTML = status; if (status == true) &#123; document.getElementById('btn_scan').innerHTML = \"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML = \"Discover Devices\"; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered = status; document.getElementById('status_discovered').innerHTML = status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(\"discoverSvcsAndChars server=\" + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service = false; services_discovered = 0; service_count = services.length; console.log(\"Got \" + service_count + \" services\"); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) &#123; has_temperature_service = true; &#125; console.log('Getting Characteristics for service ' + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log('&gt; Service: ' + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log('&gt;&gt; Characteristic: ' + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_number_string = true; &#125; if (characteristic.uuid == TEMPERATURE) &#123; temperature = characteristic; has_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(\"FINISHED DISCOVERY\"); setDiscoveryStatus(true); // setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i = 0; function randomLEDs() //第6课上添加 &#123; console.log(\"randomLEDs\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array = [0, 0, 0, 0, 0]; var led_array2 = [ [12, 2, 12, 2, 12], [4, 10, 2, 4, 14], [4, 12, 4, 4, 14], [0, 10, 21, 10, 4], [10, 21, 17, 10, 4] ]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array = led_array2[i % 5]; i++; /*led_array[0] = led_array2[i][1]; led_array[1] = led_array2[i][1]; led_array[2] = led_array2[i][2]; led_array[3] = led_array2[i][3]; led_array[4] = led_array2[i][4];*/ /* led_array[0] = 10;//Math.floor(Math.random() * 32); led_array[1] = 21; led_array[2] = 17; led_array[3] = 10; led_array[4] = 4; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function readModelNumber() &#123; console.log(\"readModelNumber\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_device_information_service) &#123; alert(\"Error: The connected device does not contain the device information service \"); return; &#125; if (!has_model_number_string) &#123; alert(\"Error: The connected device does not contain the model name string characteristic \"); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(\"utf-8\").decode(data); console.log(model_number_string); document.getElementById(\"model_number\").innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;/h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=\"status_connected\"&gt;False&lt;/td&gt; &lt;td id=\"status_discovered\"&gt;False&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;/h2&gt; &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;button id=\"btn_scan\" onclick=\"discoverDevicesOrDisconnect()\"&gt; Discover Devices &lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Read Characteristic - Model Number&lt;/h3&gt; &lt;button id=\"btn_read\" onclick=\"readModelNumber()\"&gt;Read Model Number&lt;/button&gt; &lt;div id=\"model_number\"&gt;&lt;/div&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=\"btn_write\" onclick=\"randomLEDs()\"&gt;Randomise LEDs&lt;/button&gt; &lt;hr&gt;&lt;/body&gt;&lt;/html&gt; 添加代码完成后，连接蓝牙开发板我们可以看到如下图： 当我们点击Read Model Number会显示型号 点击Randomise LEDs蓝牙开发板上面的led会发生改变 二、控制LED的亮灭控制LED的亮灭，用到了LED_MATRIX_STATE特性，在程序中需添加一个randomLEDs()函数，控制LED的亮灭。代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243function randomLEDs() //第6课上添加 &#123; console.log(\"randomLEDs\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array = [0, 0, 0, 0, 0]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array[0] = Math.floor(Math.random() * 32); led_array[1] = 1; led_array[2] = 2; led_array[3] = 3; led_array[4] = 4; var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; 和上面一样，需要添加一个按钮，每当按一次按钮，LED变化一次。添加的代码如下： 12&lt;button id=\"btn_write\" onclick=\"randomLEDs()\"&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; 然后连接蓝牙开发板后，可以控制LED的变化效果就成功了!","categories":[],"tags":[]},{"title":"蓝牙的服务与特性","slug":"蓝牙的服务与特性","date":"2020-06-19T07:22:10.757Z","updated":"2020-06-19T10:37:17.213Z","comments":true,"path":"2020/06/19/蓝牙的服务与特性/","link":"","permalink":"http://yoursite.com/2020/06/19/%E8%93%9D%E7%89%99%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8E%E7%89%B9%E6%80%A7/","excerpt":"","text":"蓝牙的服务与特性我们在上第二个项目蓝牙的服务与特性，这次我们可以直接在第一次课的代码基础上直接添加代码。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; // 保存用户选择的蓝牙设备 var connected_server; //在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected=false; //在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 var services_discovered =false; //在第五节课上添加 //在第5课上添加以下内容 // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_number_string = false; var has_temperature_service = false; var has_temperature = false; // service UUIDs ACCELEROMETER_SERVICE = 'e95d0753-251d-470a-a062-fa1922dfa9a8'; LED_SERVICE = 'e95dd91d-251d-470a-a062-fa1922dfa9a8'; DEVICE_INFORMATION_SERVICE = '0000180a-0000-1000-8000-00805f9b34fb'; TEMPERATURE_SERVICE = 'e95d6100-251d-470a-a062-fa1922dfa9a8'; // characteristic UUIDs ACCELEROMETER_DATA = 'e95dca4b-251d-470a-a062-fa1922dfa9a8'; LED_MATRIX_STATE = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'; MODEL_NUMBER_STRING = '00002a24-0000-1000-8000-00805f9b34fb'; TEMPERATURE='e95d9250-251d-470a-a062-fa1922dfa9a8'; // cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverDevicesOrDisconnect() //在第四课基础上添加的函数 &#123; console.log(\"discoverDevicesOrDisconnect\"); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() //在第四课基础上添加的函数 &#123; console.log(\"onDisconnected\") resetUI(); &#125; function discoverDevices() &#123; console.log(\"discoverDevices\"); //consol.log 控制台打印输出 var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) //Navigator对象，包含有关游览器的信息 .then(device =&gt; &#123; console.log('&gt; Name: ' + device.name); console.log('&gt; Id: ' + device.id); console.log('&gt; Connected: ' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); //在第二课基础上添加的函数 &#125;) .catch(error =&gt;&#123; alert('ERROR:' +error); console.log('ERROR:' +error); &#125;); &#125; function connect() &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function(server) //表示连接成功 &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected=\" + server.connected); selected_device.addEventListener('gattserverdisconnected',onDisconnected); connected_server = server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function(error) //表示连接失败 &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected=status; document.getElementById('status_connected').innerHTML=status; if(status==true) &#123; document.getElementById('btn_scan').innerHTML=\"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML=\"Discover Devices\"; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered = status; document.getElementById('status_discovered').innerHTML = status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() //在第5课基础上添加的函数 &#123; console.log(\"discoverSvcsAndChars server=\" + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service = false; services_discovered = 0; service_count = services.length; console.log(\"Got \" + service_count + \" services\"); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) &#123; has_temperature_service = true; &#125; console.log('Getting Characteristics for service ' + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log('&gt; Service: ' + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log('&gt;&gt; Characteristic: ' + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_number_string = true; &#125; if (characteristic.uuid == TEMPERATURE) &#123; temperature = characteristic; has_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(\"FINISHED DISCOVERY\"); setDiscoveryStatus(true); // setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i=0; function randomLEDs() //第6课上添加 &#123; console.log(\"randomLEDs\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array = [0, 0, 0, 0, 0]; var led_array2 =[[12,2,12,2,12],[4,10,2,4,14],[4,12,4,4,14],[0,10,21,10,4],[10,21,17,10,4]]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array=led_array2[i%5]; i++; /*led_array[0] = led_array2[i][1]; led_array[1] = led_array2[i][1]; led_array[2] = led_array2[i][2]; led_array[3] = led_array2[i][3]; led_array[4] = led_array2[i][4];*/ /* led_array[0] = 10;//Math.floor(Math.random() * 32); led_array[1] = 21; led_array[2] = 17; led_array[3] = 10; led_array[4] = 4; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;/h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=\"status_connected\"&gt;False&lt;/td&gt; &lt;td id=\"status_discovered\"&gt;False&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;/h2&gt; &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;button id=\"btn_scan\" onclick=\"discoverDevicesOrDisconnect()\"&gt; Discover Devices &lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=\"btn_write\" onclick=\"randomLEDs()\"&gt;Randomise LEDs&lt;/button&gt; &lt;hr&gt; &lt;/body&gt;&lt;/html&gt; 如上述代码所示我新增加discoverSvcsAndChars()函数，它的作用就是发现服务及特性。我们将代码输入后以谷歌浏览器打开如下图： 然后点击Disconnect,点击自己的开发板然后配对，连接成功后可以看到true，如下图： 之后我们按fn+f12会出现如下图： 这就是我们开发板服务和特性。我们可以先查C看自己的BBC Microbit开发板提供的有关蓝牙的服务，网址：chrome://bluetooth-internals/ 打开网址如下图所示： 成功连接开发板后，如下图： 其中Service下方的长串就是UUID号。上图的服务中心并没有温度的UUID号,那我们就要来修改micro bit开发板子端程序。修改micro bit开发板子端程序就是修改.hex文件，点击网址：https://makecode.microbit.org/v0/89975-20684-84568-20127 进入后点击编辑，切换为javascript格式，在最后加上bluetooth.startTemperatureService() 就会出现蓝牙温度服务。如下图： 然后点击下载，会出现.hex的文件，把它直接拖到BBC盘符下就可以。然后我们重新点击网址chrome://bluetooth-internals/#devices/ca:a6:e9:72:1d:16 就会看到连接BBC板就会多出一个服务。点击链接：https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html 进入网址后按Ctrl+f就会出现查找，接着我们输入：Temperature。找到如下图所示： 我们会看到UUID号，该UUID号和我们刚刚打开的蓝牙插件中多出的那个服务UUID号相同，如下图所示：","categories":[],"tags":[]},{"title":"蓝牙定时器连接与配对（项目一）","slug":"蓝牙定时器连接与配对（项目一）","date":"2020-06-16T09:14:07.315Z","updated":"2020-06-16T10:28:26.822Z","comments":true,"path":"2020/06/16/蓝牙定时器连接与配对（项目一）/","link":"","permalink":"http://yoursite.com/2020/06/16/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/","excerpt":"","text":"实现蓝牙定时器的连接与配对一、写代码 注：这里用Visual Studio Code来编写代码 写代码要以.html的后缀名来写，其中每个代码都有每个代码的功能。为了我们能更好的理解代码，我们最好在代码后面添加注释用“//”。 如图： 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var selected_server; var connected = false; function discoverOrdisconnectDevices()//发现或断开函数 &#123; console.log(\"discoverDeviceOrDisconnect\"); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#123; console.log(\"onDisconnected\"); resetUI(); &#125; function discoverDevices() &#123; console.log(\"discoverDevices\");//console.log控制台打印输出 var options = &#123;acceptAllDevices:true&#125;//发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options)//Navigator对象：包含有关浏览器的信息 .then(device =&gt; &#123; console.log('&gt; Name:' + device.name); console.log('&gt; Id:' + device.id); console.log('&gt; Connected:' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert('ERROR' +error); console.log('ERROR' +error); &#125;) &#125; function connect() &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function (server) &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected \" + server.connected); selected_device.addEventListener('gattseverdisconnected',onDisconnected); connected_server =server; setConnectedStatus(true); &#125;, function (error) &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected = status; document.getElementById('Status_connected').innerHTML = status; if(status == true) &#123; document.getElementById('btn_scan').innerHTML = \"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML = \"Discover Devices\"; &#125; &#125; function resetUI() &#123; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=\"Status_connected\"&gt;false&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2&gt; Device Discovery &lt;/h2&gt; &lt;button id = \"btn_scan\" onclick=\"discoverDevices()\"&gt;Start scan&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; ​ 二、连接板子将板子和数据线插好，连接在电脑的USB接口上将 然后将 microbit-SIG-web-bluetooth-tutorial.hex 拖动到板子插上后电脑上多出的盘符中。 此时板子上显示的是”D“。 三、配对将写好的代码保存在桌面，以谷歌浏览器方式打开，如下图： 注意：这里我们要用谷歌浏览器，不建议使用其他浏览器。 然后我们点击Start scan就会出现可以连接的设备，如下图： 这个时候点击BBC micro:bit [tezut]，然后点击配对，如下图： 此时，浏览器中就会显示ture ，说明显示成功。如下图： 这个时候板子上就会显示C，如下图： 本次蓝牙定时器连接与配对成功！ 断开连接后板子就会显示D！","categories":[],"tags":[]},{"title":"我的博客搭建过程四","slug":"我的博客搭建过程四","date":"2020-05-31T13:52:48.671Z","updated":"2020-06-19T02:12:39.191Z","comments":true,"path":"2020/05/31/我的博客搭建过程四/","link":"","permalink":"http://yoursite.com/2020/05/31/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%9B%9B/","excerpt":"","text":"教你如何添加图片1.首先在Typora中进行设置，点击文件—偏好设置—图像，然后把它改成如下图： 2.点击格式—图像—设置图片根目录—点击选择，如下图： 3.打开blog/source/images,把你要用的图片保存在images的文件夹下，如下图： 然后把images中的图片拖到Typora你需要的位置中，保存后执行 hexo s 本地预览看到图片就完成了！ 教你如何添加评论功能在我们下载的主题中 blog/themes/cube（选择自己下载的主题文件夹）/_config.yml（以Typora方式打开） 找到评论把他的参数改为ture，然后保存。 本地预览之后就可以看到你的博客具有评论功能啦！","categories":[],"tags":[]},{"title":"我的博客搭建过程三","slug":"我的博客搭建过程三","date":"2020-05-28T03:16:23.037Z","updated":"2020-05-31T09:06:12.521Z","comments":true,"path":"2020/05/28/我的博客搭建过程三/","link":"","permalink":"http://yoursite.com/2020/05/28/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/","excerpt":"","text":"教你如何写博文Typora:单栏实时显示排版样式，需要用户熟悉Markdown语法。 Visual Studio Code:双栏显示，一栏是编辑区，一栏是显示区。 建议大家使用本地开发工具里的Typora。 一、新建博文首先我们在blog/source/_posts文件夹下新建文本文档，把后缀名写成.md就可以以Typora软件打开直接可以写博客啦！ 第二种新建博文可以执行以下语句 其中filename可以用你喜欢的博文名字替代，命令执行完后，就会在_posts下生成一篇名叫filename的新文章。同时你会发现编辑器Typora也打开了，你就可以在里面编辑内容了！ 1.设置编辑器路径：在站点根目录（blog\\）下新建scripts目录，软后在新建auto_open.js，在文件中填入以下内容： 注意，start后面的编辑器路径得修改为你电脑上Typora 实际安装的位置。如果忘记自己安装的Hexo 是什么版本，可以使用hexo -v指令来查看。本步骤通常只需要在你的电脑上操作一次。 二、查看本地新博文1.清除旧数据（根目录下的public文件夹存放着旧右博客生成的HTML网页） 安装完后如果看到public文件被删除，则说明执行成功。 2.生成新数据（生成新的HTML网页会存放到public文件夹下） 如果结果连续出现以下内容，则表示执行成功。 3.启动hexo服务 如果发现有“Hexo is running at http://localhost:4000/ 字符串，则表示启动成功，hexo当前就运行在该网址上面。上述指令中的s表示server。 4.博客预览：在浏览器中输入上述网址http://localhost:4000/ ,如果看到新页面则大功告成。","categories":[],"tags":[]},{"title":"我的博客搭建过程二","slug":"我的博客搭建过程二","date":"2020-05-24T10:12:57.972Z","updated":"2020-05-31T09:01:48.159Z","comments":true,"path":"2020/05/24/我的博客搭建过程二/","link":"","permalink":"http://yoursite.com/2020/05/24/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/","excerpt":"","text":"一、Github的准备1.注册Github:右上角的sign in是登陆，sign up是注册。 2.新建仓库（Repository）:点击 create repository按钮。 注意：仓库名称必须写为username.github.io其中username是你注册Github使用的用户名。 3.查看仓库配置：点击仓库右上角的Settings选项。 如果没有发现.ssh目录存在，则表明当前用户还没有ssh密钥，则可以继续下面两步： 其中双引号的内容修改为你自己在Github上注册的邮箱。过程中当需要用户输入时，可以直接回车。指令执行结果如下图所示。 图中的~/ssd/.ssh/id_rsa.pub文件就是我们需要的，他保护着我们的public key。 4.Github账户添加SSH公钥：在Github账户的Settings-&gt;SSH and GPG keys 下单击N任务SSH key,将id_rsa.pub文件中的所有内容拷贝进去。 二、绑定Hexo和Github1.修改本地站点配置文件：打开站点目录（blog)下的_config.yml文件，将最后一部分修改为 这段源码的意思是：我们将采用git工具来做Hexo博客的部署，部署在哪里呢？位置在Github上的username/username.github.io.git这样一个仓库里，切实仓库的master分支上。注意：上述冒号的后面都用一个空格。 2.安装关联hexo 和git的工具： 如果最后可以看到这个工具 的版本号，则表明安装成功。 三、Hexo升天1.部署Hexo:执行以下命令 这个命令会将本地博客根目录（blog)下public文件夹里的所有的文件上传至Github上的username/username.github.io.git这个仓库。d:depoly是部署的意思。 2.博客预览：在浏览器中输入https://username.github.io,如果看到新页面则大功告成。 注意：如果以后写了新的博文后希望更新到Github上的博客，则必须先执行清楚本地就旧数据（网页）和生成新数据（网页）两个动作、即依次执行hexo clean 和hexo g操作。最后再执行部署动作hexo d。","categories":[],"tags":[]},{"title":"博客主题换装秀","slug":"博客主题换装秀","date":"2020-04-03T12:15:20.000Z","updated":"2020-05-31T08:16:56.667Z","comments":true,"path":"2020/04/03/博客主题换装秀/","link":"","permalink":"http://yoursite.com/2020/04/03/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E8%A3%85%E7%A7%80/","excerpt":"","text":"刚新建好的博客比较丑，所以我们把它变得美美的！ 这里我在网上找到了博客主题官网： https://hexo.io/themes/ 我们在博客主题的官网中挑出你最满意的主题，例如： 点击 cube 主题，找到如图下载命令，复制命令。然后打开你的blog文件夹，右击选中 Git Bash Here 粘贴到上面进行下载。 注：下载过程比较漫长要耐心等待哦！ 接着在你的 blog/themes的文件夹中会发现多一个 cube 文件夹，如下图： 注：在这里我们要下载 typora 以便打开站点配置文件_config.yml 。之后写博文也要用它。 用 Typora 打开 cube 文件夹中的主题站点配置文件 _config.yml ，主题的设置都将在里面更改来实现效果！具体设置主题网站里都有介绍，在这里我就不详细说明了。 设置好主题，我们就可以部署到网站上了。 用以上同样的方式打开 git bash here 输入命令： hexo d -g 接着输入命令：hexo s 复制你的网址到浏览器就可以看到美丽的博客啦！ 注：当你复制网址的时候不能用 “ctrl+c” ,他它代表结束博客的意思，这样就无法访问了，所以我们选中网址右击copy就可以啦！","categories":[],"tags":[]},{"title":"我的博客搭建过程","slug":"我的博客搭建过程","date":"2020-03-28T10:05:20.000Z","updated":"2020-04-03T12:08:21.087Z","comments":true,"path":"2020/03/28/我的博客搭建过程/","link":"","permalink":"http://yoursite.com/2020/03/28/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/","excerpt":"","text":"一、hexo的环境配置1.点击安装 Node.js 完成后在CMD窗口中输入命令：node -v 若结果显示版本号，则表示Node.js安装成功。如下图所示。 继续输入命令：npm -v 若显示版本号，则表示npm安装成功。 2.点击安装 git 完成后在CMD窗口输入命令: git 若显示出各种git的用法，则表示git安装成功。 注：安装两个软件时一直next即可 二、安装Hexo1.安装Hexo 在CMD窗口使用命令： npm install hexo-cli -g 结果显示版本号，则安装成功。 或者输入命令： hexo -v 若显示版本号，则表示安装成功。 2.创建Hexo博客根目录 在CMD窗口使用命令： md blog 注：上述语句会在CMD的当前路径下创建一个名为blog的文件夹。 该文件后面会将保存你的各种资源及博文，我们把这个目录简称为根目录， 所以建议你将目录生成在你常用的位置。 3.初始化Hexo博客 在CMD窗口输入下面两条命令： cd blog hexo init 若结果显示“Start blogging with Hexo!”，则表示初始化成功，你可以开始写博客了。 注: 如果出现这种情况不要慌,可能网络不好,多尝试几次就可以了! 三、博客本地预览1.启动Hexo服务 在CMD窗口输入命令：hexo s 若结果显示“Hexo is running at http://localhost:4000/ ”字符串，则表示启动成功。 2.博客预览 复制网址 http://localhost:4000/ 到浏览器上运行就可以看到自己的博客页面。","categories":[],"tags":[]}],"categories":[],"tags":[]}