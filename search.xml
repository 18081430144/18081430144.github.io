<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客主题换装秀</title>
    <url>/2020/04/03/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E8%A3%85%E7%A7%80/</url>
    <content><![CDATA[<p>刚新建好的博客比较丑，所以我们把它变得美美的！</p>
<p>这里我在网上找到了博客主题官网：</p>
<p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p>
<p>我们在博客主题的官网中挑出你最满意的主题，例如：</p>
<img src="/images/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E8%A3%85%E7%A7%80/7-1585917092314.jpg" alt="7" style="zoom:80%;" />

<p>点击  cube  主题，找到如图下载命令，复制命令。然后打开你的blog文件夹，右击选中 Git Bash Here 粘贴到上面进行下载。</p>
<blockquote>
<p>注：下载过程比较漫长要耐心等待哦！</p>
</blockquote>
<p>接着在你的 blog/themes的文件夹中会发现多一个  cube  文件夹，如下图：</p>
<img src="/images/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%8D%A2%E8%A3%85%E7%A7%80/8.png" alt="8" style="zoom:80%;" />

<blockquote>
<p>注：在这里我们要下载  typora  以便打开站点配置文件_config.yml  。之后写博文也要用它。</p>
</blockquote>
<p>用  Typora  打开  cube  文件夹中的主题站点配置文件  _config.yml  ，主题的设置都将在里面更改来实现效果！具体设置主题网站里都有介绍，在这里我就不详细说明了。</p>
<p>设置好主题，我们就可以部署到网站上了。</p>
<p>用以上同样的方式打开  git bash here  输入命令：</p>
<p>hexo d -g</p>
<p>接着输入命令：hexo s   复制你的网址到浏览器就可以看到美丽的博客啦！</p>
<blockquote>
<p>注：当你复制网址的时候不能用  “ctrl+c”   ,他它代表结束博客的意思，这样就无法访问了，所以我们选中网址右击copy就可以啦！</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>我的博客搭建过程二</title>
    <url>/2020/05/24/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="一、Github的准备"><a href="#一、Github的准备" class="headerlink" title="一、Github的准备"></a>一、Github的准备</h1><h5 id="1-注册Github"><a href="#1-注册Github" class="headerlink" title="1.注册Github:"></a>1.注册Github:</h5><p>右上角的sign in是登陆，sign up是注册。</p>
<h5 id="2-新建仓库（Repository）"><a href="#2-新建仓库（Repository）" class="headerlink" title="2.新建仓库（Repository）:"></a>2.新建仓库（Repository）:</h5><p>点击 create repository按钮。</p>
<blockquote>
<p>注意：仓库名称必须写为username.github.io其中username是你注册Github使用的用户名。</p>
</blockquote>
<h5 id="3-查看仓库配置："><a href="#3-查看仓库配置：" class="headerlink" title="3.查看仓库配置："></a>3.查看仓库配置：</h5><p>点击仓库右上角的Settings选项。</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/21.png" alt="21"></p>
<p>如果没有发现.ssh目录存在，则表明当前用户还没有ssh密钥，则可以继续下面两步：</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/22.png" alt="22"></p>
<p>其中双引号的内容修改为你自己在Github上注册的邮箱。过程中当需要用户输入时，可以直接回车。指令执行结果如下图所示。</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/23.jpg" alt="23"></p>
<p>图中的~/ssd/.ssh/id_rsa.pub文件就是我们需要的，他保护着我们的public key。</p>
<h5 id="4-Github账户添加SSH公钥："><a href="#4-Github账户添加SSH公钥：" class="headerlink" title="4.Github账户添加SSH公钥："></a>4.Github账户添加SSH公钥：</h5><p>在Github账户的Settings-&gt;SSH and GPG keys 下单击N任务SSH key,将id_rsa.pub文件中的所有内容拷贝进去。</p>
<h1 id="二、绑定Hexo和Github"><a href="#二、绑定Hexo和Github" class="headerlink" title="二、绑定Hexo和Github"></a>二、绑定Hexo和Github</h1><h5 id="1-修改本地站点配置文件："><a href="#1-修改本地站点配置文件：" class="headerlink" title="1.修改本地站点配置文件："></a>1.修改本地站点配置文件：</h5><p>打开站点目录（blog)下的_config.yml文件，将最后一部分修改为</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/24.png" alt="24"></p>
<p>这段源码的意思是：我们将采用git工具来做Hexo博客的部署，部署在哪里呢？位置在Github上的username/username.github.io.git这样一个仓库里，切实仓库的master分支上。注意：上述冒号的后面都用一个空格。</p>
<h5 id="2-安装关联hexo-和git的工具："><a href="#2-安装关联hexo-和git的工具：" class="headerlink" title="2.安装关联hexo 和git的工具："></a>2.安装关联hexo 和git的工具：</h5><p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/25.png" alt="25"></p>
<p>如果最后可以看到这个工具 的版本号，则表明安装成功。</p>
<h1 id="三、Hexo升天"><a href="#三、Hexo升天" class="headerlink" title="三、Hexo升天"></a>三、Hexo升天</h1><h5 id="1-部署Hexo-执行以下命令"><a href="#1-部署Hexo-执行以下命令" class="headerlink" title="1.部署Hexo:执行以下命令"></a>1.部署Hexo:执行以下命令</h5><p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%BA%8C/26.png" alt="26"></p>
<p>这个命令会将本地博客根目录（blog)下public文件夹里的所有的文件上传至Github上的username/username.github.io.git这个仓库。d:depoly是部署的意思。</p>
<h5 id="2-博客预览："><a href="#2-博客预览：" class="headerlink" title="2.博客预览："></a>2.博客预览：</h5><p>在浏览器中输入<a href="https://username.github.io,如果看到新页面则大功告成。" target="_blank" rel="noopener">https://username.github.io,如果看到新页面则大功告成。</a></p>
<blockquote>
<p>注意：如果以后写了新的博文后希望更新到Github上的博客，则必须先执行清楚本地就旧数据（网页）和生成新数据（网页）两个动作、即依次执行hexo clean 和hexo g操作。最后再执行部署动作hexo d。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>我的博客搭建过程三</title>
    <url>/2020/05/28/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/</url>
    <content><![CDATA[<h1 id="教你如何写博文"><a href="#教你如何写博文" class="headerlink" title="教你如何写博文"></a>教你如何写博文</h1><p>Typora:单栏实时显示排版样式，需要用户熟悉Markdown语法。</p>
<p>Visual Studio Code:双栏显示，一栏是编辑区，一栏是显示区。</p>
<blockquote>
<p>建议大家使用本地开发工具里的Typora。</p>
</blockquote>
<h3 id="一、新建博文"><a href="#一、新建博文" class="headerlink" title="一、新建博文"></a>一、新建博文</h3><p>首先我们在blog/source/_posts文件夹下新建文本文档，把后缀名写成.md就可以以Typora软件打开直接可以写博客啦！</p>
<p>第二种新建博文可以执行以下语句</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/31.png" alt="31"></p>
<p>其中filename可以用你喜欢的博文名字替代，命令执行完后，就会在_posts下生成一篇名叫filename的新文章。同时你会发现编辑器Typora也打开了，你就可以在里面编辑内容了！</p>
<h5 id="1-设置编辑器路径："><a href="#1-设置编辑器路径：" class="headerlink" title="1.设置编辑器路径："></a>1.设置编辑器路径：</h5><p>在站点根目录（blog\）下新建scripts目录，软后在新建auto_open.js，在文件中填入以下内容：</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/32.png" alt="32"></p>
<blockquote>
<p>注意，start后面的编辑器路径得修改为你电脑上Typora 实际安装的位置。如果忘记自己安装的Hexo 是什么版本，可以使用hexo -v指令来查看。本步骤通常只需要在你的电脑上操作一次。</p>
</blockquote>
<h3 id="二、查看本地新博文"><a href="#二、查看本地新博文" class="headerlink" title="二、查看本地新博文"></a>二、查看本地新博文</h3><h5 id="1-清除旧数据"><a href="#1-清除旧数据" class="headerlink" title="1.清除旧数据"></a>1.清除旧数据</h5><p>（根目录下的public文件夹存放着旧右博客生成的HTML网页）</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/33.png" alt="33"></p>
<p>安装完后如果看到public文件被删除，则说明执行成功。</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/34.png" alt="34"></p>
<h5 id="2-生成新数据"><a href="#2-生成新数据" class="headerlink" title="2.生成新数据"></a>2.生成新数据</h5><p>（生成新的HTML网页会存放到public文件夹下）</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/35.png" alt="35"></p>
<p>如果结果连续出现以下内容，则表示执行成功。</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/36.jpg" alt="36"></p>
<h5 id="3-启动hexo服务"><a href="#3-启动hexo服务" class="headerlink" title="3.启动hexo服务"></a>3.启动hexo服务</h5><p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/37.png" alt="37"></p>
<p>如果发现有“Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 字符串，则表示启动成功，hexo当前就运行在该网址上面。上述指令中的s表示server。</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%89/38.jpg" alt="38"></p>
<h5 id="4-博客预览："><a href="#4-博客预览：" class="headerlink" title="4.博客预览："></a>4.博客预览：</h5><p>在浏览器中输入上述网址<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ,如果看到新页面则大功告成。</p>
]]></content>
  </entry>
  <entry>
    <title>我的博客搭建过程</title>
    <url>/2020/03/28/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、hexo的环境配置"><a href="#一、hexo的环境配置" class="headerlink" title="一、hexo的环境配置"></a>一、hexo的环境配置</h2><h5 id="1-点击安装-Node-js"><a href="#1-点击安装-Node-js" class="headerlink" title="1.点击安装 Node.js"></a>1.点击安装 Node.js</h5><p>   完成后在CMD窗口中输入命令：node -v</p>
<p>   若结果显示版本号，则表示Node.js安装成功。如下图所示。</p>
<p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/1.png" alt="1"></p>
<p>   继续输入命令：npm -v</p>
<p>   若显示版本号，则表示npm安装成功。</p>
<p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/2.png" alt="2"></p>
<h5 id="2-点击安装-git"><a href="#2-点击安装-git" class="headerlink" title="2.点击安装 git"></a>2.点击安装 git</h5><p>   完成后在CMD窗口输入命令:  git</p>
<p>   若显示出各种git的用法，则表示git安装成功。</p>
<blockquote>
<p>注：安装两个软件时一直next即可</p>
</blockquote>
<p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/3.png" alt="3"></p>
<h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><h5 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h5><p>   在CMD窗口使用命令： npm install hexo-cli -g</p>
<p>   结果显示版本号，则安装成功。</p>
<p>   或者输入命令： hexo -v</p>
<p>   若显示版本号，则表示安装成功。</p>
<p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/4.png" alt="4"></p>
<h5 id="2-创建Hexo博客根目录"><a href="#2-创建Hexo博客根目录" class="headerlink" title="2.创建Hexo博客根目录"></a>2.创建Hexo博客根目录</h5><p>   在CMD窗口使用命令： md blog</p>
<blockquote>
<p>注：上述语句会在CMD的当前路径下创建一个名为blog的文件夹。</p>
<p>该文件后面会将保存你的各种资源及博文，我们把这个目录简称为根目录，</p>
<p>所以建议你将目录生成在你常用的位置。</p>
</blockquote>
<h5 id="3-初始化Hexo博客"><a href="#3-初始化Hexo博客" class="headerlink" title="3.初始化Hexo博客"></a>3.初始化Hexo博客</h5><p>   在CMD窗口输入下面两条命令： </p>
<p>   cd blog</p>
<p>   hexo init</p>
<p>   若结果显示“Start blogging with Hexo!”，则表示初始化成功，你可以开始写博客了。</p>
<blockquote>
<p>注:            <img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/5.jpg" alt="5" style="zoom: 50%;" /><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/6.png" alt="6" style="zoom:50%;" /></p>
</blockquote>
<p>如果出现这种情况不要慌,可能网络不好,多尝试几次就可以了!</p>
<h2 id="三、博客本地预览"><a href="#三、博客本地预览" class="headerlink" title="三、博客本地预览"></a>三、博客本地预览</h2><h5 id="1-启动Hexo服务"><a href="#1-启动Hexo服务" class="headerlink" title="1.启动Hexo服务"></a>1.启动Hexo服务</h5><p>   在CMD窗口输入命令：hexo s</p>
<p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720200403181027.png" alt="TIM图片20200403181027"></p>
<p>   若结果显示“Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ”字符串，则表示启动成功。</p>
<h5 id="2-博客预览"><a href="#2-博客预览" class="headerlink" title="2.博客预览"></a>2.博客预览</h5><p>   复制网址  <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  到浏览器上运行就可以看到自己的博客页面。</p>
]]></content>
  </entry>
  <entry>
    <title>我的博客搭建过程四</title>
    <url>/2020/05/31/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="教你如何添加图片"><a href="#教你如何添加图片" class="headerlink" title="教你如何添加图片"></a>教你如何添加图片</h1><p>1.首先在Typora中进行设置，点击文件—偏好设置—图像，然后把它改成如下图：</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%9B%9B/41.jpg" alt="41"></p>
<p>2.点击格式—图像—设置图片根目录—点击选择，如下图：</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%9B%9B/42.jpg" alt="42"></p>
<p>3.打开blog/source/images,把你要用的图片保存在images的文件夹下，如下图：</p>
<p><img src="/../images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%9B%9B/43.png" alt="43"></p>
<p>然后把images中的图片拖到Typora你需要的位置中，保存后执行 hexo s 本地预览看到图片就完成了！</p>
<h1 id="教你如何添加评论功能"><a href="#教你如何添加评论功能" class="headerlink" title="教你如何添加评论功能"></a>教你如何添加评论功能</h1><p>在我们下载的主题中</p>
<p>blog/themes/cube（选择自己下载的主题文件夹）/_config.yml（以Typora方式打开）</p>
<p>找到评论把他的参数改为ture，然后保存。</p>
<p>本地预览之后就可以看到你的博客具有评论功能啦！</p>
]]></content>
  </entry>
  <entry>
    <title>蓝牙定时器连接与配对（项目一）</title>
    <url>/2020/06/16/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="实现蓝牙定时器的连接与配对"><a href="#实现蓝牙定时器的连接与配对" class="headerlink" title="实现蓝牙定时器的连接与配对"></a>实现蓝牙定时器的连接与配对</h1><h3 id="一、写代码"><a href="#一、写代码" class="headerlink" title="一、写代码"></a>一、写代码</h3><blockquote>
<p>注：这里用Visual Studio Code来编写代码</p>
</blockquote>
<p>写代码要以.html的后缀名来写，其中每个代码都有每个代码的功能。为了我们能更好的理解代码，我们最好在代码后面添加注释用“//”。</p>
<p>如图：</p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9911-1592300134963.png" alt="蓝牙11"></p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9912-1592300195405.png" alt="蓝牙12"></p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9913.png" alt="蓝牙13"></p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9914.png" alt="蓝牙14"></p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9915.png" alt="蓝牙15"></p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span>    selected_device;</span><br><span class="line">        <span class="keyword">var</span>    selected_server;</span><br><span class="line">        <span class="keyword">var</span>    connected = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">discoverOrdisconnectDevices</span>(<span class="params"></span>)//发现或断开函数</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"discoverDeviceOrDisconnect"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!connected)</span><br><span class="line">                discoverDevices();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                selected_device.gatt.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onDisconnected</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"onDisconnected"</span>);</span><br><span class="line">            resetUI();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">discoverDevices</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"discoverDevices"</span>);<span class="comment">//console.log控制台打印输出</span></span><br><span class="line">            <span class="keyword">var</span> options = &#123;<span class="attr">acceptAllDevices</span>:<span class="literal">true</span>&#125;<span class="comment">//发现所有周边蓝牙设备</span></span><br><span class="line">            navigator.bluetooth.requestDevice(options)<span class="comment">//Navigator对象：包含有关浏览器的信息</span></span><br><span class="line">            .then(<span class="function"><span class="params">device</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'&gt; Name:'</span> + device.name);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'&gt; Id:'</span> + device.id);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'&gt; Connected:'</span> + device.gatt.connected);</span><br><span class="line">                selected_device = device;</span><br><span class="line">                <span class="built_in">console</span>.log(selected_device);</span><br><span class="line">                connect();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                alert(<span class="string">'ERROR'</span> +error);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'ERROR'</span> +error);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"connecting"</span>);</span><br><span class="line">            selected_device.gatt.connect()</span><br><span class="line">            .then(</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">server</span>)</span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"Connected to"</span> + server.device.id);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"Connected "</span> + server.connected);</span><br><span class="line">                    selected_device.addEventListener(<span class="string">'gattseverdisconnected'</span>,onDisconnected);</span><br><span class="line">                    connected_server =server;</span><br><span class="line">                    setConnectedStatus(<span class="literal">true</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">error</span>)</span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"ERROR:could not connct-"</span> + error);</span><br><span class="line">                   alert(<span class="string">"ERROR:could not connct-"</span> + error);</span><br><span class="line">                   setConnectedStatus(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setConnectedStatus</span>(<span class="params">status</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            connected = status;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'Status_connected'</span>).innerHTML = status;</span><br><span class="line">            <span class="keyword">if</span>(status == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'btn_scan'</span>).innerHTML = <span class="string">"Disconnect"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'btn_scan'</span>).innerHTML = <span class="string">"Discover Devices"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">resetUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        &lt;<span class="regexp">/script&gt; </span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            Status</span><br><span class="line">        &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;table border="1"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;    &lt;b&gt;Connected&lt;/</span>b&gt;    &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td id=<span class="string">"Status_connected"</span>&gt;<span class="literal">false</span>&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;</span></span><br><span class="line"><span class="regexp">            Device Discovery</span></span><br><span class="line"><span class="regexp">        &lt;/</span>h2&gt;</span><br><span class="line">        &lt;button id = <span class="string">"btn_scan"</span> onclick=<span class="string">"discoverDevices()"</span>&gt;Start scan&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
<h3 id="二、连接板子"><a href="#二、连接板子" class="headerlink" title="二、连接板子"></a>二、连接板子</h3><p>将板子和数据线插好，连接在电脑的USB接口上将</p>
<p>然后将 <a href="......\Desktop\蓝牙定时器\microbit-SIG-web-bluetooth-tutorial.hex">microbit-SIG-web-bluetooth-tutorial.hex</a> 拖动到板子插上后电脑上多出的盘符中。</p>
<p>此时板子上显示的是”D“。</p>
<h3 id="三、配对"><a href="#三、配对" class="headerlink" title="三、配对"></a>三、配对</h3><p>将写好的代码保存在桌面，以谷歌浏览器方式打开，如下图：</p>
<blockquote>
<p>注意：这里我们要用谷歌浏览器，不建议使用其他浏览器。</p>
</blockquote>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9916.jpg" alt="蓝牙16"></p>
<p>然后我们点击Start scan就会出现可以连接的设备，如下图：</p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9917.png" alt="蓝牙17"></p>
<p>这个时候点击BBC micro:bit [tezut]，然后点击配对，如下图：</p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9919.jpg" alt="蓝牙19"></p>
<p>此时，浏览器中就会显示ture ，说明显示成功。如下图：</p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%9918.jpg" alt="蓝牙18"></p>
<p>这个时候板子上就会显示C，如下图：</p>
<p><img src="/../images/%E8%93%9D%E7%89%99%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%85%8D%E5%AF%B9%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%89/%E8%93%9D%E7%89%99120.jpg" alt="蓝牙120"></p>
<p>本次蓝牙定时器连接与配对成功！</p>
<p>断开连接后板子就会显示D！</p>
]]></content>
  </entry>
</search>
